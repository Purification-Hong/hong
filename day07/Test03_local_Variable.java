package day07;
/*
  지역변수 (Local Variable)==> 변수 중에서 생성된 지역에서만 사용할 수 있는 변수
  
  변수는 함수내에서 생성된 변수는 STACK에 만들어진다. 이 영역은 크기가 작은 영역으로 배정받는다.
  따라서 데이터를 지속적으로 기억하기에는 힘들다. 
  
  해결방법은 변수를 만들어 달라고 요청하는 순간 변수를 만든다.
  1. 변수를 만들어 달라고 요청하는 순간 변수를 만든다.
  2. 변수가 만들어진 영역 {}을 벗어나면 자동 소멸시킨다.
  
  주의) 
     for명령의 카운터변수는 해당 for명령에서만 사용할 수 있는 지역변수이다
     따라서 해당 for명령의 블럭 {}이 끝나는 순간 사라지는 변수이다.
     
     카운터변수란? for (int i=0; i <10 ; i++){}
  
  반복문도 조건문과 같이 중첩해서 사용할 수 있다.
  **이때 안쪽에 있는 반복문은 감싸고 있는 반복문이 반보진행하면 처음부터 다시 실행되게 해주는 것이 일반적이다.
  
   for 명령의 경우는 자동초기화가 문법적으로 이루어진다.
   
      for(int i=0; i<10 ; i++) {
       	for(int j=0; j<10; j++) {
       	   처리내용...
       	}
      }
  
 */
public class Test03_local_Variable {

/* flag기법  
    : 정해진 문자열이 순수하게 숫자로 구성되었는지 중간에 다른 문자가 포함되어있는지 알아보세요.
    힌트) charAt()   : 문자열중 해당 위치의 문자를 추출해주는 함수  
 */	
	
	public static void main(String[] args) {
		String str="1o301";
		//결과변수
		boolean result=false;
		for(int i=0 ; i < str.length() ; i++) {
			char ch = str.charAt(i);
			if(ch < '0' || ch > '9'  ) {
				// 이 경우는 숫자형태가 아닌 문자가 포함되어 있는 경우
				result=true; // 결과값 변수 변경
				break;
			}
		}
		if(result==true) {//중간에 숫자형태가 아닌 문자가 포함된 경우
			System.out.printf("[%s] 문자열은 숫자가 아닌 문자가 포함되어 있습니다.", str);
		} else {
			System.out.printf("[%s] 문자열은 숫자형태의 문자들로 이루어져 있습니다.", str);
		}
	}
}
